#!/bin/bash
set -euo pipefail

[ -z ${LOG_LEVEL+x}    ] && export LOG_LEVEL=notice
[ -z ${N_NODES+x}      ] && export N_NODES=10
[ -z ${N_CORE_NODES+x} ] && export N_CORE_NODES=3
[ -z ${LB_STRATEGY+x}  ] && export LB_STRATEGY=roundrobin
[ -z ${DISCOVERY+x}    ] && export DISCOVERY=static

export STATS_PORT=8898

pwgen () {
    openssl rand -base64 12
}

error() {
  awk "BEGIN { print \"$@\" > \"/dev/fd/2\" }"
}

export ROOT_DIR=$(git rev-parse --show-toplevel)
export GRAFANA_PASS=$(pwgen)
export SYSMON_PASS=$(pwgen)

export CERTS_DIR=".ssl_certs"
export ENVFILE=".emqx.env"

create_envfile() {
    env | grep EMQX_ > "${ENVFILE}" || true
}

create_prometheus_config() {
    cat <<EOF > .prometheus
global:
  scrape_interval: 1s
  evaluation_interval: 2s

scrape_configs:
  - job_name: 'emqx'
    honor_labels: true

    static_configs:
      - targets:
$(for i in $(seq 1 $N_NODES); do
echo "        - 'emqx$i:18083'"
done)
    metrics_path: '/api/v5/prometheus/stats'
  - job_name: 'pushgw'
    honor_labels: true
    static_configs:
      - targets: ['sysmon_pushgateway:9091']
EOF
}

create_certificates() {
    [ -f "${CERTS_DIR}/domain.pem" ] && return 0
    mkdir -p "${CERTS_DIR}"
    pushd "${CERTS_DIR}"
    # Create config:
    cat <<EOF > domain.ext
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
subjectAltName = @alt_names
[alt_names]
DNS.1 = backplane
EOF
    set -x
    # Create self-signed root CA:
    openssl req -nodes -x509 -sha256 -days 1825 -newkey rsa:2048 -keyout rootCA.key -out rootCA.pem -subj "/O=LocalOrg/CN=LocalOrg-Root-CA"
    # Create a private key:
    openssl genrsa -out domain.key 2048
    # Create CSR:
    openssl req -key domain.key -new -out domain.csr -subj "/O=LocalOrg"
    # Sign Our CSR With Root CA:
    openssl x509 -req -CA rootCA.pem -CAkey rootCA.key -in domain.csr -out domain.pem -days 365 -CAcreateserial -extfile domain.ext
    set +x
    popd
}

linux_distro() {
    grep DISTRIB_ID /etc/lsb-release | cut -f2 -d'='
}

linux_distro_version() {
    grep DISTRIB_RELEASE /etc/lsb-release | cut -f2 -d'='
}

docker_image() {
    case $(linux_distro) in
      Arch)
        echo "archlinux/archlinux:base-devel-20211019.0.37052"
        ;;
      Ubuntu)
        echo "ubuntu:$(linux_distro_version)"
        ;;
    esac
}

docker_prepare() {
    case $(linux_distro) in
        Ubuntu)
            echo "RUN apt-get update"
            echo "RUN apt-get install -y libssl-dev"
            ;;
    esac
}

get_rel_dir() {
    if [ -d "_build/emqx/rel/emqx" ]; then
        echo "_build/emqx/rel/emqx"
    elif [ -d "_build/emqx-ee/rel/emqx" ] ; then
        echo "_build/emqx-ee/rel/emqx"
    else
      error 'Could not find release directory! Did you forget to call "make emqx-rel"?'
      exit 1
    fi
}

host() {
    echo -n "n${1}.local"
}

node() {
    echo -n "emqx@$(host $1)"
}

build() {
    docker build --no-cache --tag "$(image-name)" .
}

## Create a unique image name for a current directory
image-name() {
    echo -n "emqx-$(pwd | md5sum | head -c5)"
}

CORE_NODES=$(for i in $(seq 1 $N_CORE_NODES); do
                 (node $i)
                 [ $i -eq $N_CORE_NODES ] || echo -n ','
             done)

container() {
    cat <<EOF
  emqx${1}:
    image: $(image-name)
    hostname: $(host $1)
    depends_on:
    - sysmon_postgres
    ports:
    - 1883
    - 9091
    networks:
      backplane:
        aliases:
          - $(host $1)

    env_file:
      - ${ENVFILE}
    environment:
    - "EMQX_NODE__COOKIE=$(cat ~/.erlang.cookie)"
    - "EMQX_LOG__CONSOLE_HANDLER__ENABLE=true"
    - "EMQX_LOG__CONSOLE_HANDLER__LEVEL=${LOG_LEVEL}"
    - "EMQX_RPC__MODE=sync"

    - "EMQX_NODE__NAME=$(node $1)"
    - "EMQX_CLUSTER__DISCOVERY_STRATEGY=${DISCOVERY}"
    - "EMQX_CLUSTER__STATIC__SEEDS=[${CORE_NODES}]"

    - "EMQX_SYSMON__TOP__DB_HOSTNAME=sysmon_postgres"
    - "EMQX_SYSMON__TOP__DB_PASSWORD=${SYSMON_PASS}"

    - "EMQX_PROMETHEUS__ENABLE=true"
    - "EMQX_PROMETHEUS__PUSH_GATEWAY_SERVER=\"http://sysmon_pushgateway:9091\""
    - "EMQX_RPC__ENABLE_SSL=5369"
EOF
}

core() {
    container $1
}

replicant() {
    container $1
    cat <<EOF
    - "EMQX_NODE__DB_ROLE=replicant"
EOF
}

create_dockerfiles() {
    cat <<EOF > .dockerignore
_build/emqx/rel/emqx/data/mnesia
_build/emqx/rel/emqx/log
_build/emqx/rel/emqx/emqx-*.tar.gz
EOF

    cat <<EOF > Dockerfile
FROM $(docker_image)
$(docker_prepare)

# Invalidate Docker build cache
RUN echo "$(date)"

COPY $(get_rel_dir) /opt/emqx/
COPY ${CERTS_DIR}/domain.pem /var/lib/emqx/ssl/
COPY ${CERTS_DIR}/domain.key /var/lib/emqx/ssl/
COPY ${CERTS_DIR}/rootCA.pem /var/lib/emqx/ssl/

COPY $(get_rel_dir) /opt/emqx/

WORKDIR /opt/emqx
ENV EMQX_RPC__DRIVER=tcp
ENV EMQX_RPC__CERTFILE=/var/lib/emqx/ssl/domain.pem
ENV EMQX_RPC__CACERTFILE=/var/lib/emqx/ssl/rootCA.pem
ENV EMQX_RPC__KEYFILE=/var/lib/emqx/ssl/domain.key

CMD /opt/emqx/bin/emqx foreground
EOF

    # Haproxy dockerfile
    mkdir -p haproxy
    pushd haproxy
    cat <<EOF > haproxy.cfg
defaults
  log global
  option dontlognull
  timeout connect 5000ms
  timeout client 50000ms
  timeout server 50000ms

resolvers dockerns
  nameserver ns1 127.0.0.11:53

listen stats
  bind *:${STATS_PORT}
  mode http
  stats enable
  stats refresh 1s
  stats show-node
  stats uri /

listen mqtt
  bind *:1883
  mode tcp
  option clitcpka # For TCP keep-alive
  timeout client 3h
  timeout server 3h
  option tcplog
  balance ${LB_STRATEGY}
$(for i in $(seq 1 10); do
echo "  server emqx$i emqx$i:1883 check resolvers dockerns init-addr last,libc,none"
done)

listen dashboard
  bind *:18083
  mode http
  timeout client 3h
  timeout server 3h
  option http-keep-alive
  balance roundrobin
  cookie SRVNAME insert
$(for i in $(seq 1 $N_NODES); do
echo "  server emqx$i emqx$i:18083 cookie S${i} check"
done)
EOF
    popd
}

create_dockercompose() {
    cat <<EOF > docker-compose.yml
version: '3.3'

networks:
  backplane:

services:
$(for i in $(seq 1 $N_CORE_NODES); do
core $i
done)

$(for i in $(seq $(($N_CORE_NODES+1)) $N_NODES); do
replicant $i
done)

  # Load balancer
  haproxy:
    image: haproxy:1.7
    depends_on:
$(for i in $(seq 1 $N_NODES); do
echo "    - emqx$i"
done)
    ports:
    - 1883:1883
    - ${STATS_PORT}:${STATS_PORT}
    - 18083:18083
    networks:
      backplane:
    volumes:
    - $(pwd)/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro

  # Monitoring
  sysmon_postgres:
    image: ghcr.io/k32/sysmon-postgres:1.0.0
    networks:
      backplane:
    environment:
      - POSTGRES_PASSWORD=$(pwgen)
      - SYSMON_PASS=${SYSMON_PASS}
      - GRAFANA_PASS=${GRAFANA_PASS}
    logging:
      driver: "none"

  sysmon_pushgateway:
    image: "prom/pushgateway:latest"
    networks:
      backplane:
    ports:
    - 9091:9091
    logging:
      driver: "none"

  sysmon_prometheus:
    image: "prom/prometheus:latest"
    networks:
      backplane:
    volumes:
    - $(pwd)/.prometheus:/etc/prometheus/prometheus.yml
    depends_on:
$(for i in $(seq 1 $N_NODES); do
echo "    - 'emqx$i'"
done)
    - sysmon_pushgateway
    ports:
    - 9090:9090
    logging:
      driver: "none"

  sysmon_grafana:
    image: ghcr.io/k32/sysmon-grafana:1.0.0
    depends_on:
    - sysmon_postgres
    - sysmon_prometheus
    ports:
    - 3000:3000
    networks:
      backplane:
    environment:
    - POSTGRES_PASS=${GRAFANA_PASS}
    - POSTGRES_URL=sysmon_postgres:5432
    - PROMETHEUS_URL=http://sysmon_prometheus:9090
    - GF_AUTH_ANONYMOUS_ENABLED=true
    logging:
      driver: "none"
EOF
}

create_prometheus_config
create_certificates
create_dockerfiles
create_dockercompose
create_envfile

if [[ $# -lt 1 ]]; then
    cat docker-compose.yml
else
    build
    docker-compose $@
fi

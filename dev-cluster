#!/bin/bash
set -euo pipefail

[ -z ${LOG_LEVEL+x}    ] && export LOG_LEVEL=notice
[ -z ${N_NODES+x}      ] && export N_NODES=10
[ -z ${N_CORE_NODES+x} ] && export N_CORE_NODES=3
[ -z ${LB_STRATEGY+x}  ] && export LB_STRATEGY=roundrobin

export STATS_PORT=8898

pwgen () {
    openssl rand -base64 12
}

error() {
  awk "BEGIN { print \"$@\" > \"/dev/fd/2\" }"
}

export GRAFANA_PASS=$(pwgen)
export SYSMON_PASS=$(pwgen)

linux_distro() {
    grep DISTRIB_ID /etc/lsb-release | cut -f2 -d'='
}

docker_image() {
    case $(linux_distro) in
      Arch)
        echo "archlinux/archlinux:base-devel-20211019.0.37052"
        ;;
      *)
        echo "ubuntu:21.04"
        ;;
    esac
}

get_rel_dir() {
    if [ -d "_build/emqx/rel/emqx" ]; then
        echo "_build/emqx/rel/emqx"
    elif [ -d "_build/emqx-ee/rel/emqx" ] ; then
        echo "_build/emqx-ee/rel/emqx"
    else
      error 'Could not find release directory! Did you forget to call "make emqx-rel"?'
      exit 1
    fi
}

host() {
    echo -n "n${1}.local"
}

node() {
    echo -n "emqx@$(host $1)"
}

build() {
    [ "${1}" -eq "1" ] && echo "build: ."
}

## Create a unique image name for a current directory
image-name() {
    echo -n "$(basename $(pwd))-$(pwd | md5sum | head -c5)"
}

CORE_NODES=$(for i in $(seq 1 $N_CORE_NODES); do
                 node $i
                 [ $i -eq $N_CORE_NODES ] || echo -n ','
             done)

container() {
    cat <<EOF
  emqx${1}:
    $(build $1)
    image: $(image-name)
    hostname: $(host $1)
    depends_on:
    - sysmon_postgres
    ports:
    - $((2882 + $1)):1883
    networks:
      backplane:
        aliases:
          - $(host $1)

    environment:
    - "EMQX_LOG__CONSOLE_HANDLER__ENABLE=true"
    - "EMQX_LOG__CONSOLE_HANDLER__LEVEL=${LOG_LEVEL}"
    - "EMQX_RPC__MODE=sync"

    - "EMQX_NODE__NAME=$(node $1)"
    - "EMQX_CLUSTER__DISCOVERY_STRATEGY=static"
    - "EMQX_CLUSTER__STATIC__SEEDS=[${CORE_NODES}]"

    - "EMQX_DB__BACKEND=rlog"

    - "EMQX_SYSMON__TOP__DB_HOSTNAME=sysmon_postgres"
    - "EMQX_SYSMON__TOP__DB_PASSWORD=${SYSMON_PASS}"

    - "EMQX_PROMETHEUS_ENABLE=true"
EOF
}

core() {
    container $1
}

replicant() {
    container $1
    cat <<EOF
    - "EMQX_DB__ROLE=replicant"
    - "EMQX_DB__CORE_NODES=${CORE_NODES}"
EOF
}

create_dockerfiles() {
    cat <<EOF > .dockerignore
_build/emqx/rel/emqx/data/mnesia
_build/emqx/rel/emqx/log
_build/emqx/rel/emqx/emqx-*.tar.gz
EOF

    cat <<EOF > Dockerfile
FROM $(docker_image)

COPY $(get_rel_dir) /opt/emqx/

WORKDIR /opt/emqx

CMD /opt/emqx/bin/emqx foreground
EOF

    # Haproxy dockerfile
    mkdir -p haproxy
    pushd haproxy
    cat <<EOF > haproxy.cfg
defaults
  log global
  option dontlognull
  timeout connect 5000ms
  timeout client 50000ms
  timeout server 50000ms

listen stats
  bind *:${STATS_PORT}
  mode http
  stats enable
  stats refresh 1s
  stats show-node
  stats uri /

listen mqtt
  bind *:1883
  mode tcp
  option clitcpka # For TCP keep-alive
  timeout client 3h
  timeout server 3h
  option tcplog
  balance ${LB_STRATEGY}
$(for i in $(seq 1 $N_NODES); do
echo "  server emqx$i emqx$i:1883 check"
done)

listen dashboard
  bind *:18083
  mode http
  timeout client 3h
  timeout server 3h
  option http-keep-alive
  balance roundrobin
  cookie SRVNAME insert
$(for i in $(seq 1 $N_NODES); do
echo "  server emqx$i emqx$i:18083 cookie S${i} check"
done)
EOF
    popd
}

create_dockercompose() {
    cat <<EOF > docker-compose.yml
version: '3.3'

networks:
  backplane:

services:
$(for i in $(seq 1 $N_CORE_NODES); do
core $i
done)

$(for i in $(seq $(($N_CORE_NODES+1)) $N_NODES); do
replicant $i
done)

  # Load balancer
  haproxy:
    image: haproxy:1.7
    depends_on:
$(for i in $(seq 1 $N_NODES); do
echo "    - emqx$i"
done)
    ports:
    - 1883:1883
    - ${STATS_PORT}:${STATS_PORT}
    - 18083:18083
    networks:
      backplane:
    volumes:
    - $(pwd)/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro

  # Monitoring
  sysmon_postgres:
    image: ghcr.io/k32/sysmon-postgres:0.1.2
    networks:
      backplane:
    environment:
      - POSTGRES_PASSWORD=$(pwgen)
      - SYSMON_PASS=${SYSMON_PASS}
      - GRAFANA_PASS=${GRAFANA_PASS}

  sysmon_prometheus:
    image: "prom/prometheus:latest"
    networks:
      backplane:

  sysmon_grafana:
    image: ghcr.io/k32/sysmon-grafana:0.1.2
    depends_on:
    - sysmon_postgres
    - sysmon_prometheus
    ports:
    - 3000:3000
    networks:
      backplane:
    environment:
    - POSTGRES_PASS=${GRAFANA_PASS}
    - POSTGRES_URL=sysmon_postgres:5432
EOF
}

create_dockerfiles
create_dockercompose

if [[ $# -lt 1 ]]; then
    cat docker-compose.yml
else
    docker-compose $@
fi
